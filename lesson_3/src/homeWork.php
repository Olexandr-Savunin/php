<?php
                            //#1
    echo "<pre>
    1. \$color = array('white', 'green', 'red', 'blue', 'black');
    Напишіть сценарій, у якому відображатиметься такий рядок:
    «Пам’ять про цю сцену для мене схожа на кадр фільму, який назавжди завмер у цій миті:
    червона доріжка, зелена галявина, білий дім, свинцеве небо. 
    Новий президент і його перша леді - Річард М. Ніксон\",
    а слова \"червоний\", \"зелений\" і \"білий\" походять від \$color.
    </pre>";
    echo '<center><h1> #1 </h1></center>';
        $color = ['white', 'green', 'red', 'blue', 'black'];
        echo " <p> «Пам’ять про цю сцену для мене схожа на кадр фільму, який назавжди завмер у цій миті: $color[2] доріжка, $color[1] галявина, $color[0] дім,  свинцеве небо. Новий президент і його перша леді - Річард М. Ніксон \" </p> ";
    echo '<hr>';



                            //#2
    echo "<pre>
    2. \$color = array('white', 'green', 'red'')
    Напишіть сценарій PHP, який відображатиме кольори таким чином:
    Вихідні дані:
    білий, зелений, червоний,
    
    зелений
    червоний
    білий
    </pre>";
    echo '<center><h1> #2 </h1></center>';
        $color = array('white', 'green', 'red');
        foreach($color as $c){
            echo "$c, ";
        }
        sort($color);
        echo '<ul>';
            foreach ($color as $y) {
            echo "<li>$y</li>";
            }
        echo '</ul>';
    echo '<hr>';



                            //#3
    echo "<pre>
    3. \$ceu = array( \"Італія\"=>\"Рим\", \"Люксембург\"=>\"Люксембург\", \"Бельгія\"=> \"Брюссель\", \"Данія\"=>\"Копенгаген\", \"Фінляндія\"=>\"Гельсінкі\" \", \"Франція\" => \"Париж\",
     \"Словаччина\" => \"Братислава\", \"Словенія\" => \"Любляна\", \"Німеччина\" => \"Берлін\", \"Греція\" => \"Афіни\", \"Ірландія\" =>\"Дублін\", \"Нідерланди\"=>\"Амстердам\",
      \"Португалія\"=>\"Лісабон\", \"Іспанія\"=>\"Мадрид\", \"Швеція\"=>\"Стокгольм\", \"Великобританія\"=>\"Лондон \", \"Кіпр\"=>\"Нікосія\", \"Литва\"=>\"Вільнюс\", \"Чехія\"=>\"Прага\",
       \"Естонія\"=>\"Таллін\", \"Угорщина\"=>\"Будапешт\", \"Латвія\" \"=>\"Рига\", \"Мальта\"=>\"Валетта\", \"Австрія\" => \"Відень\", \"Польща\"=>\"Варшава\") ;

    Створіть сценарій PHP, який відображає столицю та назву країни з наведеного вище масиву \$ceu. Відсортуйте список за столицею країни.
    
    Зразок вихідних даних:
    Столиця Нідерландів – Амстердам 
    Столиця Греції – Афіни 
    Столиця Німеччини – Берлін                    
    </pre>";
    echo '<center><h1> #3 </h1></center>';
        $ceu = array( 'Італія'=>'Рим', 'Люксембург'=>'Люксембург', 'Бельгія'=> 'Брюссель', 'Данія'=>'Копенгаген', 'Фінляндія'=>'Гельсінкі', 'Франція' => 'Париж', 'Словаччина' => 'Братислава', 'Словенія' => 'Любляна', 'Німеччина' => 'Берлін', 'Греція' => 'Афіни', 'Ірландія' =>'Дублін', 'Нідерланди'=>'Амстердам', 'Португалія'=>'Лісабон', 'Іспанія'=>'Мадрид', 'Швеція'=>'Стокгольм', 'Великобританія'=>'Лондон', 'Кіпр'=>'Нікосія', 'Литва'=>'Вільнюс', 'Чехія'=>'Прага', 'Естонія'=>'Таллін', 'Угорщина'=>'Будапешт', 'Латвія'=>'Рига', 'Мальта'=>'Валетта', 'Австрія'=> 'Відень', 'Польща'=>'Варшава');
        //print_r($ceu);
        echo 'Зразок вихідних даних:<br>';
        asort($ceu);
        foreach ($ceu as $country => $capital) {
            echo "Столиця $country - $capital" . "<br>";
        }
    echo '<hr>';



                            //#4
    echo "<pre>
    4. \$x = масив (1, 2, 3, 4, 5);
    Видаліть елемент із наведеного вище масиву PHP. Після видалення елемента необхідно нормалізувати цілі ключі.
    Приклад результату:
    array(5) { [0]=> int(1) [1]=> int(2) [2]=> int(3) [3]=> int(4) [4]=> int (5) } 
    array(4) { [0]=> int(1) [1]=> int(2) [2]=> int(3) [3]=> int(5) }                  
   </pre>";
    echo '<center><h1> #4 </h1></center>';
        $x = [1, 2, 3, 4, 5];
        echo 'Приклад результату:<br>';
        var_dump($x);
        unset($x[3]);
        // Видаляється число 4, у масиві елементи рахуються з "0"
        $x = array_values($x);
        echo '<br>';
        var_dump($x);
    echo '<hr>';



                            //#5
    echo "<pre>
    5. \$color = array(4 => 'white', 6 => 'green', 11=> 'red');
    Напишіть скрипт PHP, щоб отримати перший елемент масиву вище.
    Очікуваний результат: білий               
    </pre>";
    echo '<center><h1> #5 </h1></center>';
        $color = array(4 => 'white', 6 => 'green', 11=> 'red');
        echo "Очікуваний результат: $color[4]";
    echo '<hr>';



                            //#6
    echo "<pre>
    6. Напишіть сценарій PHP, який декодує наступний рядок JSON.
    Приклад коду JSON:
    {\"Назва\": \"Зозуля кличе\",
    \"Автор\": \"Роберт Гелбрейт\",
    \"Деталі\": {
    \"Видавництво\": \"Маленький Браун\"
    }}
    Очікуваний результат:
    Назва : Зозуля кличе
    Автор: Роберт Видавництво Galbraith
    : Little Brown                    
    </pre>";
    echo '<center><h1> #6 </h1></center>';
    // function w3rfunction($value, $key) {
    //     echo "$key : $value" . "\n";
    //     $a = '{"Title": "The Cuckoos Calling",
    //         "Author": "Robert Galbraith",
    //         "Detail": { 
    //                     "Publisher": "Little Brown"
    //                    }
    //        }';
    //        //echo $a;
    //        $j1 = json_decode($a, true);
    //        // $j1;
    //        array_walk_recursive($j1, "w3rfunction");
    // }
    echo "Очікуваний результат:<br>";
        echo "НЕ ЗНАЮ ЯК ЗРОБИТИ!!!";
    echo '<hr>';
    


                            //#7
    echo "<pre>
    7. Напишіть скрипт PHP, який вставлятиме новий елемент у масив у будь-яку позицію.
    Очікуваний результат:
    Оригінальний масив: 
    1 2 3 4 5 
    Після вставки '$' масив:
    1 2 3 $ 4 5                    
    </pre>";
    echo '<center><h1> #7 </h1></center>';
        echo "Очікуваний результат:<br>";
        echo "Оригінальний масив: <br>";
        //$arr = [ 1, 2, 3, 4, 5 ];
        //echo "$arr[0] $arr[1] $arr[2] $arr[3] $arr[4]";
        $original = array( '1', '2', '3', '4', '5' );
        foreach ($original as $x) {
            echo "$x ";
        }
        echo "<br> Після вставки '$' масив: <br>";
        $inserted = '$';
        //array_splice — Удаляет часть массива и заменяет её чем-нибудь ещё
        array_splice($original, 3, 0, $inserted);
        foreach ($original as $x) {
            echo "$x ";
        }
    echo '<hr>';



                            //#8
    echo "<pre>
    8. Напишіть скрипт PHP для сортування такого асоціативного масиву:
    array(\"Sophia\"=>\"31\",\"Jacob\"=>\"41\",\"William\"=>\"39\",\"Ramesh\"=>\"40\" ) в
    a) сортування за зростанням за значенням
    b) сортування за зростанням за ключем
    c) сортування за спаданням за значенням
    d) сортування за спаданням за ключем                    
    </pre>";
    echo '<center><h1> #8 </h1></center>';
        $original = array("Sophia"=>"31","Jacob"=>"41","William"=>"39","Ramesh"=>"40" );
        
        echo "a) сортування за значенням у порядку зростання <br>";
            asort($original);
            foreach ($original as $key => $value) {
            echo "На сьогодні років " . $key . " є : " . $value . "<br>";
        }

        echo "<br> b) сортування в порядку зростання за ключем <br>";
            ksort($original);
            foreach ($original as $key => $value) {
                echo $key . " сьогодні : " . $value . " років "."<br>";
            }
    
        echo "<br> c) сортування в порядку спадання за значенням <br>";
            arsort($original);
            foreach ($original as $key => $value) {
                echo "Вік " . $key . " становить : " . $value . "років" . "<br>";
            }

        echo "<br> d) сортування в порядку спадання за ключем <br>";
            krsort($original);
            foreach ($original as $key => $value) {
                echo "Вік  " . $key . "становить: " . $value . "<br>";
            } 
    echo '<hr>';



                            //#9
    echo "<pre>
    9. Напишіть скрипт PHP для обчислення та відображення середньої температури, п’яти найнижчих і найвищих температур.
    Зафіксовані температури: 78, 60, 62, 68, 71, 68, 73, 85, 66, 64, 76, 63, 75, 76, 73, 68, 62, 73, 72, 65, 74, 62, 62, 65 , 64, 68, 73, 75, 79, 73
    Очікуваний результат:
    Середня температура: 70,6 
    Список із семи найнижчих температур: 60, 62, 63, 63, 64, 
    Список із семи найвищих температур: 76, 78, 79, 81, 85,                    
    </pre>";
    echo '<center><h1> #9 </h1></center>';
            $temperature = ['78', '60', '62', '68', '71', '68', '73', '85', '66', '64', '76', '63', '75', '76', '73', '68', '62', '73', '72', '65', '74', '62', '62', '65', '64', '68', '73', '75', '79', '73'];
            //print_r($temperature);
            $sumTemp = array_sum($temperature); 
            //echo "<br>" . "сума: " . $sumTemp . "<br>";
            //echo gettype($sumTemp);
            echo "Очікуваний результат: <br>";
            $serTemp = ($sumTemp / 30);
            echo "Середня температура: $serTemp"; 
            sort($temperature);
            //echo gettype($temperature);
            //print_r($temperature);
            //print_r(array_slice($temperature, 0, 7));
            echo "<br> Список із семи найнижчих температур: ";
            foreach ( (array_slice($temperature, 0, 7)) as $low ) {
                 echo " $low,  ";
            }
            echo "<br> Список із семи найвищих температур: ";
            foreach ( (array_slice($temperature, -7, 7)) as $high ) {
                echo " $high,  ";
           }
    echo '<hr>';



                            //#10
    echo "<pre>
    10. Напишіть програму PHP для сортування масиву натуральних чисел за допомогою алгоритму Bead-Sort.
    Відповідно до Вікіпедії, «сортування бісером — це природний алгоритм сортування, розроблений Джошуа Дж. Аруланандхемом, Крістіаном С. Калуде та Майклом Дж. Дінніном у 2002 році.
    Як цифрова, так і аналогова апаратна реалізація сортування бісером може досягти часу сортування O(n ); однак реалізація цього алгоритму, як правило,
    значно повільніша в програмному забезпеченні, і його можна використовувати лише для сортування списків позитивних цілих чисел».
    Input array : Array ( [0] => 5 [1] => 3 [2] => 1 [3] => 3 [4] => 8 [5] => 7 [6] => 4 [7] => 1 [8] => 1 [9] => 3 )
    Expected Result : Array ( [0] => 8 [1] => 7 [2] => 5 [3] => 4 [4] => 3 [5] => 3 [6] => 3 [7] => 1 [8] => 1 [9] => 1 )                  
    </pre>";
    echo '<center><h1> #10 </h1></center>';
    $Array = array( " [0] => 5 [1] => 3 [2] => 1 [3] => 3 [4] => 8 [5] => 7 [6] => 4 [7] => 1 [8] => 1 [9] => 3 ");
    print_r($Array);
        echo "<br> НЕ ВМІЮ ПРАЦЮВАТИ З ФУНКЦІЯМИ";
    echo '<hr>';



                            //#11
    echo "<pre>
    11. Напишіть програму PHP для об’єднання (за індексом) наступних двох масивів.
    Приклади масивів :
    \$array1 = array(array(77, 87), array(23, 45));
    \$array2 = array(\"w3resource\", \"com\"); 
    Очікуваний результат :

    Масив  
    (      
    [0] => Масив          
    (              
    [0] => w3resource              
    [1] => 77              
    [2] => 87          
    )        
    [1] => Масив          
    (              
    [0] => ком              
    [1] => 23              
    [2] => 45          
    )    
    )          
    </pre>";
    echo '<center><h1> #11 </h1></center>';
        $array1 = array(array(77, 87), array(23, 45));
        $array2 = array("w3resource", "com");
        echo "Очікуваний результат : <br>";
        print_r($array1);
    echo '<hr>';

    

                             //#12
    echo "<pre>
    12. Напишіть функцію PHP, щоб змінити всі значення наступного масиву на верхній або нижній регістр.
    Приклади масивів :
    \$Color = array('A' => 'Синій', 'B' => 'Зелений', 'c' => 'Червоний');
    Очікуваний результат :
    значення в нижньому регістрі.
    Масив ( [A] => синій [B] => зелений [c] => червоний ) 
    Значення наведені у верхньому регістрі.
    Масив ( [A] => СИНІЙ [B] => ЗЕЛЕНИЙ [c] => ЧЕРВОНИЙ)                    
    </pre>";
     echo '<center><h1> #12 </h1></center>';
                         
     echo '<hr>';


                             //#13
    echo "<pre>
    13. Напишіть сценарій PHP, який відображає всі числа від 200 до 250, які діляться на 4.
    Примітка: не використовуйте будь-який керуючий оператор PHP.
    Очікуваний результат : 200,204,208,212,216,220,224,228,232,236,240,244,248                
    </pre>";
    echo '<center><h1> #13 </h1></center>';
    //range — Создаёт массив, содержащий диапазон элементов
    //implode — Объединяет элементы массива в строку
    //echo implode(', ', range(0, 100, 10)), PHP_EOL;
        echo "Очікуваний результат : ";
        echo implode(', ', range(200, 250, 4)), PHP_EOL;
    echo '<hr>';

    

                             //#14
    echo "<pre>
    14. Напишіть скрипт PHP, щоб отримати найкоротшу/найдовшу довжину рядка з масиву.
    Приклади масивів : (\"abcd\", \"abc\", \"de\", \"hjjj\", \"g\", \"wer\")
    Очікуваний результат : Найкоротша довжина масиву дорівнює 1. Найдовша довжина масиву дорівнює 4.            
    </pre>";
     echo '<center><h1> #14 </h1></center>';
        $arr = array ("abcd", "abc", "de", "hjjj", "g", "wer");
        echo "Очікуваний результат : <br>";
        //strlen — Получает длину строки
        //array_map — Применяет callback-функцию ко всем элементам указанных массивов
        $new_array = array_map('strlen', $arr);
        //print_r($new_array);
        //min — знайти найменше значення
        echo "Найкоротша довжина масиву дорівнює: " . min($new_array) . "<br>";
        echo "Найдовша довжина масиву дорівнює: " . max($new_array);                 
     echo '<hr>';


                             //#15
    echo "<pre>
    15. Напишіть скрипт PHP для генерації унікальних випадкових чисел у діапазоні.
    Діапазон вибірки : (11, 20)
    Вихід вибірки : 17 16 13 20 14 19 18 15 11 12                  
    </pre>";
    echo '<center><h1> #15 </h1></center>';
        //shuffle — перетасувати масив
        $mas = range(11, 20);
        shuffle ($mas);
        //print_r($mas);
        echo "Вихід вибірки : ";
        foreach ($mas as $x) {
            echo "$x, ";
        };
    echo '<hr>';

    

                             //#16
    echo "<pre>
    16. Напишіть скрипт PHP, щоб отримати найбільший ключ у масиві.                   
    </pre>";
     echo '<center><h1> #16 </h1></center>';
         $num = range(1, 25);  
         //print_r($num); 
         //array_keys — повертає всі ключі або підмножину ключів масиву
         $max_key = max(array_keys($num));
        echo $max_key;            
     echo '<hr>';


                             //#17
    echo "<pre>
    16. Напишіть скрипт PHP, щоб отримати найбільший ключ у масиві.               
    </pre>";
    echo '<center><h1> #17 </h1></center>';

    echo '<hr>';

    

                             //#18
    echo "<pre>
    18. Напишіть функцію PHP для десяткових чисел з точністю.
    Примітка: приймаються три параметри число, точність і роздільник $.
    Приклад даних :
    1.155, 2, \".\"
    100.25781, 4, \".\"
    -2,9636, 3, \".\"
    
    Очікуваний результат :
    1,15
    100,2578
    -2,964       
    </pre>";
     echo '<center><h1> #18 </h1></center>';
                         
     echo '<hr>';


                             //#19
    echo "<pre>
    19. Напишіть сценарій PHP, щоб вивести «second» і Red з наступного масиву.
    Зразок даних :
    \$color = масив ( \"колір\" => масив ( \"a\" => \"Червоний\", \"b\" => \"Зелений\", \"c\" => \"Білий\"), \"
    числа\" => масив ( 1, 2, 3, 4, 5, 6 ),
    \"дірки\" => масив ( \"Перший\", 5 => \"Другий\", \"Третій\"));       
    </pre>";
    echo '<center><h1> #19 </h1></center>';
        $color = array(
            "color" => array("a" => "Red", "b" => "Green", "c" => "White"),
            "numbers" => array(1, 2, 3, 4, 5, 6),
            "holes" => array("First", 5 => "Second", "Third")
    );
    //print_r($color);
    echo $color["holes"][5] . "<br>";
    echo $color["color"]["a"];
    echo '<hr>';

    

                             //#20
    echo "<pre>
    20. Напишіть функцію PHP для сортування масиву відповідно до іншого масиву, що діє як список пріоритетів.                 
    </pre>";
     echo '<center><h1> #20 </h1></center>';
        $arra = array(
            "numbers" => array(1, 2, 3, 4, 5, 6),
            "color" => array("a" => "Red", "b" => "Green", "c" => "White"),
            "letters" => array( "1" => "a", "2"=> "b", "3" => "c", "4"=> "d",)
        );   
        //print_r($arra);            
     echo '<hr>';



                             //#21
    echo "<pre>
                            
    </pre>";
    echo '<center><h1> #21 </h1></center>';

    echo '<hr>';
?>